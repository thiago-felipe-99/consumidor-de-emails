basePath: /
definitions:
  controllers.sent:
    properties:
      message:
        type: string
    type: object
  model.Email:
    properties:
      attachments:
        items:
          type: string
        type: array
      blindReceivers:
        items:
          $ref: '#/definitions/model.Receiver'
        minItems: 1
        type: array
      message:
        type: string
      receivers:
        items:
          $ref: '#/definitions/model.Receiver'
        minItems: 1
        type: array
      subject:
        type: string
      template:
        $ref: '#/definitions/model.TemplateData'
    required:
    - subject
    type: object
  model.Queue:
    properties:
      createdAt:
        type: string
      dlx:
        type: string
      maxRetries:
        type: integer
      name:
        type: string
    type: object
  model.QueuePartial:
    properties:
      maxRetries:
        type: integer
      name:
        type: string
    required:
    - name
    type: object
  model.Receiver:
    properties:
      email:
        type: string
      name:
        type: string
    required:
    - email
    - name
    type: object
  model.TemplateData:
    properties:
      data:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
    required:
    - name
    type: object
  model.TemplatePartial:
    properties:
      name:
        type: string
      template:
        type: string
    required:
    - name
    - template
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is an api that publishes emails in RabbitMQ.
  title: Publisher Emails
  version: "1.0"
paths:
  /email/queue:
    get:
      consumes:
      - application/json
      description: Getting all RabbitMQ queues.
      produces:
      - application/json
      responses:
        "200":
          description: all queues
          schema:
            items:
              $ref: '#/definitions/model.Queue'
            type: array
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/controllers.sent'
      summary: Get queues
      tags:
      - queue
    post:
      consumes:
      - application/json
      description: Creating a RabbitMQ queue with DLX.
      parameters:
      - description: queue params
        in: body
        name: queue
        required: true
        schema:
          $ref: '#/definitions/model.QueuePartial'
      produces:
      - application/json
      responses:
        "200":
          description: create queue successfully
          schema:
            $ref: '#/definitions/controllers.sent'
        "400":
          description: an invalid queue param was sent
          schema:
            $ref: '#/definitions/controllers.sent'
        "409":
          description: queue already exist
          schema:
            $ref: '#/definitions/controllers.sent'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/controllers.sent'
      summary: Creating queue
      tags:
      - queue
  /email/queue/{name}:
    delete:
      consumes:
      - application/json
      description: Delete a queue with DLX.
      produces:
      - application/json
      responses:
        "204":
          description: queue deleted
          schema:
            $ref: '#/definitions/controllers.sent'
        "404":
          description: queue dont exist
          schema:
            $ref: '#/definitions/controllers.sent'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/controllers.sent'
      summary: Delete queues
      tags:
      - queue
  /email/queue/{name}/send:
    post:
      consumes:
      - application/json
      description: Sends an email to the RabbitMQ queue.
      parameters:
      - description: queue name
        in: path
        name: name
        required: true
        type: string
      - description: email
        in: body
        name: queue
        required: true
        schema:
          $ref: '#/definitions/model.Email'
      produces:
      - application/json
      responses:
        "200":
          description: email sent successfully
          schema:
            $ref: '#/definitions/controllers.sent'
        "400":
          description: an invalid email param was sent
          schema:
            $ref: '#/definitions/controllers.sent'
        "404":
          description: queue does not exist
          schema:
            $ref: '#/definitions/controllers.sent'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/controllers.sent'
      summary: Sends email
      tags:
      - queue
  /email/template:
    post:
      consumes:
      - application/json
      description: Creating a email template.
      parameters:
      - description: template params
        in: body
        name: template
        required: true
        schema:
          $ref: '#/definitions/model.TemplatePartial'
      produces:
      - application/json
      responses:
        "200":
          description: create template successfully
          schema:
            $ref: '#/definitions/controllers.sent'
        "400":
          description: an invalid template param was sent
          schema:
            $ref: '#/definitions/controllers.sent'
        "409":
          description: template name already exist
          schema:
            $ref: '#/definitions/controllers.sent'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/controllers.sent'
      summary: Creating template
      tags:
      - template
swagger: "2.0"
